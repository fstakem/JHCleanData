checkEquals( typeof(feature_data$V1), "double" )
checkEquals( nrow(feature_data), 2947)
checkEquals( ncol(feature_data), 561)
path <- '../raw_data/train'
feature_data <- get_features(path)
checkEquals( typeof(feature_data$V1), "double" )
checkEquals( nrow(feature_data), 7352)
checkEquals( ncol(feature_data), 561)
}
test_get_feature_labels <- function()
{
path <- '../raw_data'
feature_labels <- get_feature_labels(path)
checkEquals( typeof(feature_labels$feature), "integer")
checkEquals( nrow(feature_labels), 561)
}
test_extract_features <- function()
{
path <- '../raw_data'
feature_labels <- get_feature_labels(path)
path <- '../raw_data/test'
feature_data <- get_features(path)
extracted_features <- extract_features(feature_data, feature_labels)
checkEquals( typeof(extracted_features$tBodyAcc_mean_X), "double" )
checkEquals( nrow(extracted_features), 2947)
checkEquals( ncol(extracted_features), 86)
path <- '../raw_data/train'
feature_data <- get_features(path)
extracted_features <- extract_features(feature_data, feature_labels)
checkEquals( typeof(extracted_features$tBodyAcc_mean_X), "double" )
checkEquals( nrow(extracted_features), 7352)
checkEquals( ncol(extracted_features), 86)
}
# Run tests
#test_get_subject()
#test_get_activity()
#test_get_activity_labels()
#test_translate_activity()
#test_get_features()
#test_get_feature_labels()
#test_extract_features()
# TODO ->
test_merge_data_set()
#test_merge_all_data()
# -----------------------------------------------------------------------------------------------
#
#   File: cleaning.R
#   Author: Fredrick Stakem
#   Created: 7.21.14
#
#   Purpose: The purpose of this code it to clean the data for the John Hopkins
#   coursera course "Getting and Cleaning Data"
#
# -----------------------------------------------------------------------------------------------
# Merge the raw data
merge_all_data <- function(root_path)
{
paths = c( file.path(root_path, 'test', fsep = .Platform$file.sep), file.path(root_path, 'train', fsep = .Platform$file.sep) )
all_data = data.frame()
for(p in paths)
{
combined_data <- merge_data_set(root_path, p)
all_data <- rbind(all_data, combined_data)
}
browser()
}
merge_data_set <- function(root_path, path)
{
subject_data <- get_subject(path)
activity_data <- get_activity(path)
activity_labels <- get_activity_labels(root_path)
activity_data <- translate_activity_id(activity_data, activity_labels)
feature_data <- get_features(path)
feature_labels <- get_feature_labels(root_path)
feature_data <- extract_features(feature_data, feature_labels)
merged_data <- cbind(subject_data, activity_data, feature_data)
return(merged_data)
}
get_subject <- function(path)
{
path_split <- strsplit(path, .Platform$file.sep)[[1]]
file_name <- paste('subject_', path_split[length(path_split)], '.txt', sep="")
file_path <- file.path(path, file_name, fsep = .Platform$file.sep)
subject_data <- read.table(file_path)
colnames(subject_data)[1] <- "subject_id"
return(subject_data)
}
get_activity <- function(path)
{
path_split <- strsplit(path, .Platform$file.sep)[[1]]
file_name <- paste('y_', path_split[length(path_split)], '.txt', sep="")
file_path <- file.path(path, file_name, fsep = .Platform$file.sep)
activity_data <- read.table(file_path)
colnames(activity_data)[1] <- "activity_id"
return(activity_data)
}
get_activity_labels <- function(path)
{
file_path <- file.path(path, 'activity_labels.txt', fsep = .Platform$file.sep)
activity_labels <- read.table(file_path)
colnames(activity_labels)[1] <- "activity_id"
colnames(activity_labels)[2] <- "activity"
return(activity_labels)
}
translate_activity_id <- function(activity_data, activity_labels)
{
map_column <- rep(activity_labels$activity,1)
translated_data<- map_column[activity_data$activity_id]
translated_data <- data.frame(activity=translated_data)
return(translated_data)
}
get_features <- function(path)
{
path_split <- strsplit(path, .Platform$file.sep)[[1]]
file_name <- paste('X_', path_split[length(path_split)], '.txt', sep="")
file_path <- file.path(path, file_name, fsep = .Platform$file.sep)
feature_data <- read.table(file_path)
return(feature_data)
}
get_feature_labels <- function(path)
{
file_path <- file.path(path, 'features.txt', fsep = .Platform$file.sep)
feature_labels <- read.table(file_path)
feature_labels <- feature_labels[, 2]
feature_labels <- data.frame(feature=feature_labels)
filtered_labels <- lapply(feature_labels, function(x){ gsub("\\(|\\)", "", x) })
filtered_labels <- lapply(filtered_labels, function(x){ gsub(",", "_", x) })
filtered_labels <- lapply(filtered_labels, function(x){ gsub("-", "_", x) })
filtered_labels <- lapply(filtered_labels, function(x){ gsub("angle", "angle_", x) })
filtered_labels <- data.frame(feature=filtered_labels)
return(filtered_labels)
}
extract_features <- function(feature_data, feature_labels)
{
cols <- grep("mean|std", feature_labels$feature, ignore.case=TRUE)
extracted_data <- feature_data[, cols]
extracted_names <- feature_labels[cols, 1]
names(extracted_data) <- extracted_names
return(extracted_data)
}
# Extract the mean and std
extract_mean_std <- function()
{
print("--- Starting mean and std extraction ---")
print("--- Finished mean and std extraction ---")
}
# Create final tidy data set
create_tidy_data <- function()
{
print("--- Starting creation of tidy data ---")
print("--- Finished creation of tidy data ---")
}
# -----------------------------------------------------------------------------------------------
#
#   File: cleaning_test.R
#   Author: Fredrick Stakem
#   Created: 7.21.14
#
#   Purpose: The purpose of this code it to test the functions that clean the data for
#   the John Hopkins coursera course "Getting and Cleaning Data"
#
# -----------------------------------------------------------------------------------------------
# Libraries
library('RUnit')
# Source
source('../src/cleaning.R')
# Merge the raw data
test_merge_all_data <- function()
{
path <- '../raw_data'
merged_data <- merge_data(path)
checkEquals( nrow(merged_data), 10299)
checkEquals( ncol(merged_data), 88)
}
test_merge_data_set <- function()
{
root_path <- '../raw_data'
path <- '../raw_data/test'
merged_data <- merge_data_set(root_path, path)
checkEquals( nrow(merged_data), 2947)
checkEquals( ncol(merged_data), 88)
path <- '../raw_data/train'
merged_data <- merge_data_set(root_path, path)
checkEquals( nrow(merged_data), 7352)
checkEquals( ncol(merged_data), 88)
}
test_get_subject <- function()
{
path <- '../raw_data/test'
subject_data <- get_subject(path)
checkEquals( typeof(subject_data$subject_id), "integer")
checkEquals( nrow(subject_data), 2947)
path <- '../raw_data/train'
subject_data <- get_subject(path)
checkEquals( typeof(subject_data$subject_id), "integer")
checkEquals( nrow(subject_data), 7352)
}
test_get_activity <- function()
{
path <- '../raw_data/test'
activity_data <- get_activity(path)
checkEquals( typeof(activity_data$activity_id), "integer")
checkEquals( nrow(activity_data), 2947)
path <- '../raw_data/train'
activity_data <- get_activity(path)
checkEquals( typeof(activity_data$activity_id), "integer")
checkEquals( nrow(activity_data), 7352)
}
test_get_activity_labels <-function()
{
path <- '../raw_data'
activity_labels <- get_activity_labels(path)
checkEquals( typeof(activity_labels$activity_id), "integer")
checkEquals( typeof(activity_labels$activity), "integer")
checkEquals( nrow(activity_labels), 6)
}
test_translate_activity <- function()
{
path <- '../raw_data'
activity_labels <- get_activity_labels(path)
path <- '../raw_data/test'
activity_data <- get_activity(path)
translated_data <- translate_activity_id(activity_data, activity_labels)
checkEquals( typeof(translated_data$activity), "integer" )
path <- '../raw_data/train'
activity_data <- get_activity(path)
translated_data <- translate_activity_id(activity_data, activity_labels)
checkEquals( typeof(translated_data$activity), "integer" )
}
test_get_features <- function()
{
path <- '../raw_data/test'
feature_data <- get_features(path)
checkEquals( typeof(feature_data$V1), "double" )
checkEquals( nrow(feature_data), 2947)
checkEquals( ncol(feature_data), 561)
path <- '../raw_data/train'
feature_data <- get_features(path)
checkEquals( typeof(feature_data$V1), "double" )
checkEquals( nrow(feature_data), 7352)
checkEquals( ncol(feature_data), 561)
}
test_get_feature_labels <- function()
{
path <- '../raw_data'
feature_labels <- get_feature_labels(path)
checkEquals( typeof(feature_labels$feature), "integer")
checkEquals( nrow(feature_labels), 561)
}
test_extract_features <- function()
{
path <- '../raw_data'
feature_labels <- get_feature_labels(path)
path <- '../raw_data/test'
feature_data <- get_features(path)
extracted_features <- extract_features(feature_data, feature_labels)
checkEquals( typeof(extracted_features$tBodyAcc_mean_X), "double" )
checkEquals( nrow(extracted_features), 2947)
checkEquals( ncol(extracted_features), 86)
path <- '../raw_data/train'
feature_data <- get_features(path)
extracted_features <- extract_features(feature_data, feature_labels)
checkEquals( typeof(extracted_features$tBodyAcc_mean_X), "double" )
checkEquals( nrow(extracted_features), 7352)
checkEquals( ncol(extracted_features), 86)
}
# Run tests
#test_get_subject()
#test_get_activity()
#test_get_activity_labels()
#test_translate_activity()
#test_get_features()
#test_get_feature_labels()
#test_extract_features()
#test_merge_data_set()
test_merge_all_data()
View(all_data)
# -----------------------------------------------------------------------------------------------
#
#   File: cleaning.R
#   Author: Fredrick Stakem
#   Created: 7.21.14
#
#   Purpose: The purpose of this code it to clean the data for the John Hopkins
#   coursera course "Getting and Cleaning Data"
#
# -----------------------------------------------------------------------------------------------
# Merge the raw data
merge_all_data <- function(root_path)
{
paths = c( file.path(root_path, 'test', fsep = .Platform$file.sep), file.path(root_path, 'train', fsep = .Platform$file.sep) )
all_data = data.frame()
for(p in paths)
{
combined_data <- merge_data_set(root_path, p)
all_data <- rbind(all_data, combined_data)
}
browser()
}
merge_data_set <- function(root_path, path)
{
subject_data <- get_subject(path)
activity_data <- get_activity(path)
activity_labels <- get_activity_labels(root_path)
activity_data <- translate_activity_id(activity_data, activity_labels)
feature_data <- get_features(path)
feature_labels <- get_feature_labels(root_path)
feature_data <- extract_features(feature_data, feature_labels)
merged_data <- cbind(subject_data, activity_data, feature_data)
return(merged_data)
}
get_subject <- function(path)
{
path_split <- strsplit(path, .Platform$file.sep)[[1]]
file_name <- paste('subject_', path_split[length(path_split)], '.txt', sep="")
file_path <- file.path(path, file_name, fsep = .Platform$file.sep)
subject_data <- read.table(file_path)
colnames(subject_data)[1] <- "subject_id"
return(subject_data)
}
get_activity <- function(path)
{
path_split <- strsplit(path, .Platform$file.sep)[[1]]
file_name <- paste('y_', path_split[length(path_split)], '.txt', sep="")
file_path <- file.path(path, file_name, fsep = .Platform$file.sep)
activity_data <- read.table(file_path)
colnames(activity_data)[1] <- "activity_id"
return(activity_data)
}
get_activity_labels <- function(path)
{
file_path <- file.path(path, 'activity_labels.txt', fsep = .Platform$file.sep)
activity_labels <- read.table(file_path)
colnames(activity_labels)[1] <- "activity_id"
colnames(activity_labels)[2] <- "activity"
return(activity_labels)
}
translate_activity_id <- function(activity_data, activity_labels)
{
map_column <- rep(activity_labels$activity,1)
translated_data<- map_column[activity_data$activity_id]
translated_data <- data.frame(activity=translated_data)
return(translated_data)
}
get_features <- function(path)
{
path_split <- strsplit(path, .Platform$file.sep)[[1]]
file_name <- paste('X_', path_split[length(path_split)], '.txt', sep="")
file_path <- file.path(path, file_name, fsep = .Platform$file.sep)
feature_data <- read.table(file_path)
return(feature_data)
}
get_feature_labels <- function(path)
{
file_path <- file.path(path, 'features.txt', fsep = .Platform$file.sep)
feature_labels <- read.table(file_path)
feature_labels <- feature_labels[, 2]
feature_labels <- data.frame(feature=feature_labels)
filtered_labels <- lapply(feature_labels, function(x){ gsub("\\(|\\)", "", x) })
filtered_labels <- lapply(filtered_labels, function(x){ gsub(",", "_", x) })
filtered_labels <- lapply(filtered_labels, function(x){ gsub("-", "_", x) })
filtered_labels <- lapply(filtered_labels, function(x){ gsub("angle", "angle_", x) })
filtered_labels <- data.frame(feature=filtered_labels)
return(filtered_labels)
}
extract_features <- function(feature_data, feature_labels)
{
cols <- grep("mean|std", feature_labels$feature, ignore.case=TRUE)
extracted_data <- feature_data[, cols]
extracted_names <- feature_labels[cols, 1]
names(extracted_data) <- extracted_names
return(extracted_data)
}
# Extract the mean and std
extract_mean_std <- function()
{
print("--- Starting mean and std extraction ---")
print("--- Finished mean and std extraction ---")
}
# Create final tidy data set
create_tidy_data <- function()
{
print("--- Starting creation of tidy data ---")
print("--- Finished creation of tidy data ---")
}
# -----------------------------------------------------------------------------------------------
#
#   File: cleaning_test.R
#   Author: Fredrick Stakem
#   Created: 7.21.14
#
#   Purpose: The purpose of this code it to test the functions that clean the data for
#   the John Hopkins coursera course "Getting and Cleaning Data"
#
# -----------------------------------------------------------------------------------------------
# Libraries
library('RUnit')
# Source
source('../src/cleaning.R')
# Merge the raw data
test_merge_all_data <- function()
{
path <- '../raw_data'
merged_data <- merge_data(path)
checkEquals( nrow(merged_data), 10299)
checkEquals( ncol(merged_data), 88)
}
test_merge_data_set <- function()
{
root_path <- '../raw_data'
path <- '../raw_data/test'
merged_data <- merge_data_set(root_path, path)
checkEquals( nrow(merged_data), 2947)
checkEquals( ncol(merged_data), 88)
path <- '../raw_data/train'
merged_data <- merge_data_set(root_path, path)
checkEquals( nrow(merged_data), 7352)
checkEquals( ncol(merged_data), 88)
}
test_get_subject <- function()
{
path <- '../raw_data/test'
subject_data <- get_subject(path)
checkEquals( typeof(subject_data$subject_id), "integer")
checkEquals( nrow(subject_data), 2947)
path <- '../raw_data/train'
subject_data <- get_subject(path)
checkEquals( typeof(subject_data$subject_id), "integer")
checkEquals( nrow(subject_data), 7352)
}
test_get_activity <- function()
{
path <- '../raw_data/test'
activity_data <- get_activity(path)
checkEquals( typeof(activity_data$activity_id), "integer")
checkEquals( nrow(activity_data), 2947)
path <- '../raw_data/train'
activity_data <- get_activity(path)
checkEquals( typeof(activity_data$activity_id), "integer")
checkEquals( nrow(activity_data), 7352)
}
test_get_activity_labels <-function()
{
path <- '../raw_data'
activity_labels <- get_activity_labels(path)
checkEquals( typeof(activity_labels$activity_id), "integer")
checkEquals( typeof(activity_labels$activity), "integer")
checkEquals( nrow(activity_labels), 6)
}
test_translate_activity <- function()
{
path <- '../raw_data'
activity_labels <- get_activity_labels(path)
path <- '../raw_data/test'
activity_data <- get_activity(path)
translated_data <- translate_activity_id(activity_data, activity_labels)
checkEquals( typeof(translated_data$activity), "integer" )
path <- '../raw_data/train'
activity_data <- get_activity(path)
translated_data <- translate_activity_id(activity_data, activity_labels)
checkEquals( typeof(translated_data$activity), "integer" )
}
test_get_features <- function()
{
path <- '../raw_data/test'
feature_data <- get_features(path)
checkEquals( typeof(feature_data$V1), "double" )
checkEquals( nrow(feature_data), 2947)
checkEquals( ncol(feature_data), 561)
path <- '../raw_data/train'
feature_data <- get_features(path)
checkEquals( typeof(feature_data$V1), "double" )
checkEquals( nrow(feature_data), 7352)
checkEquals( ncol(feature_data), 561)
}
test_get_feature_labels <- function()
{
path <- '../raw_data'
feature_labels <- get_feature_labels(path)
checkEquals( typeof(feature_labels$feature), "integer")
checkEquals( nrow(feature_labels), 561)
}
test_extract_features <- function()
{
path <- '../raw_data'
feature_labels <- get_feature_labels(path)
path <- '../raw_data/test'
feature_data <- get_features(path)
extracted_features <- extract_features(feature_data, feature_labels)
checkEquals( typeof(extracted_features$tBodyAcc_mean_X), "double" )
checkEquals( nrow(extracted_features), 2947)
checkEquals( ncol(extracted_features), 86)
path <- '../raw_data/train'
feature_data <- get_features(path)
extracted_features <- extract_features(feature_data, feature_labels)
checkEquals( typeof(extracted_features$tBodyAcc_mean_X), "double" )
checkEquals( nrow(extracted_features), 7352)
checkEquals( ncol(extracted_features), 86)
}
# Run tests
#test_get_subject()
#test_get_activity()
#test_get_activity_labels()
#test_translate_activity()
#test_get_features()
#test_get_feature_labels()
#test_extract_features()
#test_merge_data_set()
test_merge_all_data()
source('~/projects/r_prog/JHCleanData/tests/cleaning_test.R')
source('~/projects/r_prog/JHCleanData/src/cleaning.R')
source('~/projects/r_prog/JHCleanData/tests/cleaning_test.R')
